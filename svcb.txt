
# Rev 1 of the Streamed Value Change Blocks (SVCB) file format.

# Types used in the file format

u1 := a single bit, stored as compactly as possible
u2 := 2 bits, stored as compactly as possible
u32 := 32 bit unsigned integer, little endian
u64 := 64 bit unsigned integer, little endian
varu32 := varuint, maximum of u32::MAX
varu64 := varuint, maximum of u64::MAX,

bit := u1 ∈ { 0, 1 }
qit := u2 ∈ { 0, 1, x := 2, z := 3 }

unsized-vec(T) :=
    sequence of T

vec(T) :=
    length := u32
    sequence of T, *length* items long

compact-vec(T) :=
    length := varu32
    sequence of T, *length* items long

string := vec(utf-8 encoded byte)

storage :=
    id := u32
    type := u32 ∈ { BINARY := 0, QUATERNARY := 1, UTF-8 := 2 }
    length := u32
    {
        lsb := u32, if *type* ∈ { BINARY, QUATERNARY }
    }

integer-variable-data :=
    msb := u32 // most significant bit index
    lsb := u32 // least significant bit index
    signedness := u32 ∈ { SIGNED_TWOS_COMPLEMENT := 0, UNSIGNED_TWOS_COMPLEMENT := 1 }

enum-specification :=
    assert(*storages[storage-id].type* = BINARY)
    name := string
    value := unsized-vec(bit)

variable :=
    scope-id := u32
    name := string
    interpretation := u32 ∈ { NONE := 0, INTEGER := 1, ENUM := 2, UTF-8 := 3 }
    {
        storage-id := u32, if *interpretation* ∈ { NONE, ENUM, UTF-8 }
        storage-ids := vec(u32), if *interpretation* = INTEGER
    }
    interpretation-data := {
        integer-variable-data, if *interpretation* = INTEGER
        enum-variable-data := vec(enum-specification), if *interpretation* = ENUM
    }

scope :=
    // 0 is the automatic top-level parent scope, must declare a scope before being its child
    parent-scope-id := u32
    scope-id := u32
    name := string

value-change :=
    storage-id := varu32
    value := {
        unsized-vec(bit), if *storages[storage-id].type* = BINARY
        unsized-vec(qit), if *storages[storage-id].type* = QUATERNARY
        unsized-vec(utf-8 encoded character), if *storages[storage-id].type* = UTF-8
    }

block :=
    type := u8 ∈ { SCOPE := 0, VARIABLE := 1, STORAGE := 2, VALUE_CHANGE := 3, TIMESTEP := 4 }
    {
        scope, if *type* = SCOPE
        variable, if *type* = VARIABLE
        storage, if *type* = STORAGE

        value-changes := compact-vec(value-change), if *type* = VALUE_CHANGE

        // timesteps since previous timestep block
        timestep := varu64, if *type* = TIMESTEP
    }

# The file format

svcb :=
    magic := u32, must be 'svcb'
    version := u32 ∈ { 1 }
    contents := {
        rev-1, if *version* = 1
    }

rev-1 :=
    timescale := u32, femtoseconds per timestep
    blocks := unsized-vec(block)

